/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MeetSHInterface extends ethers.utils.Interface {
  functions: {
    "addLands(tuple[])": FunctionFragment;
    "allLands(uint256)": FunctionFragment;
    "buyLand(uint256,string,string)": FunctionFragment;
    "changeType(uint256,uint8)": FunctionFragment;
    "landCount()": FunctionFragment;
    "landStart()": FunctionFragment;
    "lastLight(address)": FunctionFragment;
    "lightLand((int32,int32))": FunctionFragment;
    "mintLand((int32,int32),string,string,uint8)": FunctionFragment;
    "modLand(uint256,string,string)": FunctionFragment;
    "modPrice(uint256,uint256)": FunctionFragment;
    "ownedLands(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "posLand(int32,int32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLands",
    values: [
      {
        host: string;
        guests: string[];
        name: string;
        url: string;
        typ: BigNumberish;
        pos: { lat: BigNumberish; lng: BigNumberish };
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allLands",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyLand",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "landCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "landStart", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastLight", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lightLand",
    values: [{ lat: BigNumberish; lng: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLand",
    values: [
      { lat: BigNumberish; lng: BigNumberish },
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modLand",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "modPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownedLands",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "posLand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addLands", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allLands", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "landCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "landStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastLight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lightLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modLand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownedLands", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posLand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LightLand(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LightLand"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LightLandEvent = TypedEvent<[BigNumber] & { index: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class MeetSH extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MeetSHInterface;

  functions: {
    addLands(
      lands: {
        host: string;
        guests: string[];
        name: string;
        url: string;
        typ: BigNumberish;
        pos: { lat: BigNumberish; lng: BigNumberish };
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allLands(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        [number, number] & { lat: number; lng: number },
        BigNumber
      ] & {
        host: string;
        name: string;
        url: string;
        typ: number;
        pos: [number, number] & { lat: number; lng: number };
        price: BigNumber;
      }
    >;

    buyLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeType(
      index: BigNumberish,
      typ: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    landCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    landStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastLight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blkNum: BigNumber; locIdx: BigNumber }
    >;

    lightLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      name: string,
      url: string,
      typ: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownedLands(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    posLand(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLands(
    lands: {
      host: string;
      guests: string[];
      name: string;
      url: string;
      typ: BigNumberish;
      pos: { lat: BigNumberish; lng: BigNumberish };
      price: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allLands(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      [number, number] & { lat: number; lng: number },
      BigNumber
    ] & {
      host: string;
      name: string;
      url: string;
      typ: number;
      pos: [number, number] & { lat: number; lng: number };
      price: BigNumber;
    }
  >;

  buyLand(
    index: BigNumberish,
    name: string,
    url: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeType(
    index: BigNumberish,
    typ: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  landCount(overrides?: CallOverrides): Promise<BigNumber>;

  landStart(overrides?: CallOverrides): Promise<BigNumber>;

  lastLight(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { blkNum: BigNumber; locIdx: BigNumber }>;

  lightLand(
    pos: { lat: BigNumberish; lng: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintLand(
    pos: { lat: BigNumberish; lng: BigNumberish },
    name: string,
    url: string,
    typ: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modLand(
    index: BigNumberish,
    name: string,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modPrice(
    index: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownedLands(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  posLand(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLands(
      lands: {
        host: string;
        guests: string[];
        name: string;
        url: string;
        typ: BigNumberish;
        pos: { lat: BigNumberish; lng: BigNumberish };
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    allLands(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        [number, number] & { lat: number; lng: number },
        BigNumber
      ] & {
        host: string;
        name: string;
        url: string;
        typ: number;
        pos: [number, number] & { lat: number; lng: number };
        price: BigNumber;
      }
    >;

    buyLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeType(
      index: BigNumberish,
      typ: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    landCount(overrides?: CallOverrides): Promise<BigNumber>;

    landStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastLight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blkNum: BigNumber; locIdx: BigNumber }
    >;

    lightLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mintLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      name: string,
      url: string,
      typ: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    modPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownedLands(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    posLand(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LightLand(uint256)"(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    LightLand(
      index?: null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addLands(
      lands: {
        host: string;
        guests: string[];
        name: string;
        url: string;
        typ: BigNumberish;
        pos: { lat: BigNumberish; lng: BigNumberish };
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allLands(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeType(
      index: BigNumberish,
      typ: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    landCount(overrides?: CallOverrides): Promise<BigNumber>;

    landStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastLight(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lightLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      name: string,
      url: string,
      typ: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownedLands(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    posLand(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLands(
      lands: {
        host: string;
        guests: string[];
        name: string;
        url: string;
        typ: BigNumberish;
        pos: { lat: BigNumberish; lng: BigNumberish };
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allLands(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeType(
      index: BigNumberish,
      typ: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    landCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    landStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastLight(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lightLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintLand(
      pos: { lat: BigNumberish; lng: BigNumberish },
      name: string,
      url: string,
      typ: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modLand(
      index: BigNumberish,
      name: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modPrice(
      index: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownedLands(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    posLand(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
